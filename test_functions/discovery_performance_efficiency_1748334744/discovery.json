{
  "discovery_id": "discovery_performance_efficiency_1748334744",
  "domain": "performance_efficiency",
  "timestamp": "2025-05-27T01:32:24.814179",
  "function_code": "\n# Auto-generated VR optimization function\n# Type: polynomial\n# Fitness: 0.0000\n\nimport numpy as np\n\ndef vr_optimization_function(features):\n    \"\"\"\n    VR optimization function discovered through evolutionary algorithm\n    \n    Args:\n        features: Array of input features [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]\n    \n    Returns:\n        Optimized output value\n    \"\"\"\n    \n    # Feature weights\n    weights = [1.0825393984413925, 1.676140911337467, 1.4883577783155588, 1.3838010085004604, 0.41890578079777985, 1.1157493851577867]\n    x = np.dot(features, weights[:len(features)])\n    \n    # Polynomial function\n    result = (-0.2772220168568287 * x**3 + 0.781927603830201 * x**2 + \n              0.5555335800780907 * x + 0.7745885122001905)\n    \n    return np.clip(result, -1e6, 1e6)\n\n# Example usage:\n# result = vr_optimization_function([gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type])\n",
  "fitness_score": 0,
  "discovery_method": "simple_evolution",
  "generations_run": 25,
  "population_size": 20,
  "function_type": "polynomial",
  "parameters": {
    "coefficients": [
      -0.2772220168568287,
      0.781927603830201,
      0.5555335800780907,
      0.7745885122001905
    ],
    "weights": [
      1.0825393984413925,
      1.676140911337467,
      1.4883577783155588,
      1.3838010085004604,
      0.41890578079777985,
      1.1157493851577867
    ]
  },
  "discovery_time": "2025-05-27T01:32:24.813540"
}