{
  "discovery_id": "discovery_comfort_optimization_1748334140",
  "domain": "comfort_optimization",
  "timestamp": "2025-05-27T01:22:20.393206",
  "function_code": "\n# Auto-generated VR optimization function\n# Type: linear\n# Fitness: 1.0000\n\nimport numpy as np\n\ndef vr_optimization_function(features):\n    \"\"\"\n    VR optimization function discovered through evolutionary algorithm\n    \n    Args:\n        features: Array of input features [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]\n    \n    Returns:\n        Optimized output value\n    \"\"\"\n    \n    # Feature weights\n    weights = [1.3604547077741675, 1.8424516528438568, 0.6104377712623656, -0.12289056651387975, -0.5328208745650165, -0.9952628074642718]\n    x = np.dot(features, weights[:len(features)])\n    \n    # Linear function\n    result = x + -2.681506391163639\n    \n    return np.clip(result, -1e6, 1e6)\n\n# Example usage:\n# result = vr_optimization_function([gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type])\n",
  "fitness_score": 1.0,
  "discovery_method": "simple_evolution",
  "generations_run": 25,
  "population_size": 20,
  "function_type": "linear",
  "parameters": {
    "weights": [
      1.3604547077741675,
      1.8424516528438568,
      0.6104377712623656,
      -0.12289056651387975,
      -0.5328208745650165,
      -0.9952628074642718
    ],
    "bias": -2.681506391163639
  },
  "discovery_time": "2025-05-27T01:22:20.392561"
}
