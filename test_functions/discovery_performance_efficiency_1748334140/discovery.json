{
  "discovery_id": "discovery_performance_efficiency_1748334140",
  "domain": "performance_efficiency",
  "timestamp": "2025-05-27T01:22:20.426107",
  "function_code": "\n# Auto-generated VR optimization function\n# Type: polynomial\n# Fitness: 0.0000\n\nimport numpy as np\n\ndef vr_optimization_function(features):\n    \"\"\"\n    VR optimization function discovered through evolutionary algorithm\n    \n    Args:\n        features: Array of input features [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]\n    \n    Returns:\n        Optimized output value\n    \"\"\"\n    \n    # Feature weights\n    weights = [-1.6347276729162536, 1.4200187880342678, 1.9375364312162322, 1.1950634564599287, -0.5175712559086416, -1.687801191027622]\n    x = np.dot(features, weights[:len(features)])\n    \n    # Polynomial function\n    result = (0.8467876979546551 * x**3 + -0.8562089546162246 * x**2 + \n              0.706035086389377 * x + -0.23631529485870173)\n    \n    return np.clip(result, -1e6, 1e6)\n\n# Example usage:\n# result = vr_optimization_function([gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type])\n",
  "fitness_score": 0,
  "discovery_method": "simple_evolution",
  "generations_run": 25,
  "population_size": 20,
  "function_type": "polynomial",
  "parameters": {
    "coefficients": [
      0.8467876979546551,
      -0.8562089546162246,
      0.706035086389377,
      -0.23631529485870173
    ],
    "weights": [
      -1.6347276729162536,
      1.4200187880342678,
      1.9375364312162322,
      1.1950634564599287,
      -0.5175712559086416,
      -1.687801191027622
    ]
  },
  "discovery_time": "2025-05-27T01:22:20.425657"
}