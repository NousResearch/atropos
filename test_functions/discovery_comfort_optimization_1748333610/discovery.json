{
  "discovery_id": "discovery_comfort_optimization_1748333610",
  "domain": "comfort_optimization",
  "timestamp": "2025-05-27T01:13:30.918766",
  "function_code": "\n# Auto-generated VR optimization function\n# Type: polynomial\n# Fitness: 1.0000\n\nimport numpy as np\n\ndef vr_optimization_function(features):\n    \"\"\"\n    VR optimization function discovered through evolutionary algorithm\n    \n    Args:\n        features: Array of input features [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]\n    \n    Returns:\n        Optimized output value\n    \"\"\"\n    \n    # Feature weights\n    weights = [1.2716888790333067, -1.7073850491211942, -0.7916505393920463, -0.709683771857534, 1.2207661119277446, 1.936998803804086]\n    x = np.dot(features, weights[:len(features)])\n    \n    # Polynomial function\n    result = (0.05064980095505489 * x**3 + 0.5713302593166167 * x**2 + \n              -0.25427243433309177 * x + -0.16615243073529573)\n    \n    return np.clip(result, -1e6, 1e6)\n\n# Example usage:\n# result = vr_optimization_function([gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type])\n",
  "fitness_score": 1.0,
  "discovery_method": "simple_evolution",
  "generations_run": 25,
  "population_size": 20,
  "function_type": "polynomial",
  "parameters": {
    "coefficients": [
      0.05064980095505489,
      0.5713302593166167,
      -0.25427243433309177,
      -0.16615243073529573
    ],
    "weights": [
      1.2716888790333067,
      -1.7073850491211942,
      -0.7916505393920463,
      -0.709683771857534,
      1.2207661119277446,
      1.936998803804086
    ]
  },
  "discovery_time": "2025-05-27T01:13:30.918633"
}