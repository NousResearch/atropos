{
  "discovery_id": "discovery_performance_efficiency_1748333610",
  "domain": "performance_efficiency",
  "timestamp": "2025-05-27T01:13:30.932140",
  "function_code": "\n# Auto-generated VR optimization function\n# Type: exponential\n# Fitness: 0.0000\n\nimport numpy as np\n\ndef vr_optimization_function(features):\n    \"\"\"\n    VR optimization function discovered through evolutionary algorithm\n    \n    Args:\n        features: Array of input features [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]\n    \n    Returns:\n        Optimized output value\n    \"\"\"\n    \n    # Feature weights\n    weights = [0.872504312794262, -0.08148408219278203, 0.3889184436787363, -0.2515395891407839, -0.37522044326428206, -0.8206766666950813]\n    x = np.dot(features, weights[:len(features)])\n    \n    # Exponential function\n    exp_arg = np.clip(1.2392278688033156 * x, -50, 50)\n    result = np.exp(exp_arg) + 3.4077324626898413\n    \n    return np.clip(result, -1e6, 1e6)\n\n# Example usage:\n# result = vr_optimization_function([gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type])\n",
  "fitness_score": 0,
  "discovery_method": "simple_evolution",
  "generations_run": 25,
  "population_size": 20,
  "function_type": "exponential",
  "parameters": {
    "scale": 1.2392278688033156,
    "weights": [
      0.872504312794262,
      -0.08148408219278203,
      0.3889184436787363,
      -0.2515395891407839,
      -0.37522044326428206,
      -0.8206766666950813
    ],
    "offset": 3.4077324626898413
  },
  "discovery_time": "2025-05-27T01:13:30.932021"
}
