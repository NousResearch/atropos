{
  "discovery_id": "discovery_comfort_optimization_1748337727",
  "domain": "comfort_optimization",
  "timestamp": "2025-05-27T02:22:07.871428",
  "function_code": "import numpy as np\n\ndef vr_optimization_function(gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type):\n    \"\"\"\n    Optimizes VR performance to maximize comfort scores.\n\n    Args:\n        gpu_util (float): GPU utilization percentage (0-100).\n        vram_usage (float): VRAM usage in GB.\n        cpu_util (float): CPU utilization percentage (0-100).\n        scene_complexity (float): Scene complexity score (higher is more complex).\n        duration (float): Frame duration in seconds.\n        gpu_type (float): GPU type (numerical representation, e.g., 1 for GTX 1660, 2 for RTX 2070, etc.).\n\n    Returns:\n        float: Optimized performance score between 0 and 1 (higher is better).  Returns -1 if input is invalid.\n    \"\"\"\n\n    # Input validation\n    if not all(isinstance(x, (int, float)) for x in [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]):\n        print(\"Error: Input values must be numeric.\")\n        return -1\n    if not all(0 <= x <= 100 for x in [gpu_util, cpu_util]) :\n        print(\"Error: GPU and CPU utilization must be between 0 and 100.\")\n        return -1\n    if not all (x >= 0 for x in [vram_usage, scene_complexity, duration, gpu_type]):\n        print(\"Error: VRAM usage, scene complexity, duration, and GPU type must be non-negative.\")\n        return -1\n\n    # Feature normalization (min-max scaling)\n    gpu_util_norm = gpu_util / 100  # Scale GPU utilization to 0-1\n    cpu_util_norm = cpu_util / 100  # Scale CPU utilization to 0-1\n    \n    #Assuming reasonable upper bounds for other features based on typical VR usage. Adjust if necessary.\n    vram_usage_norm = min(vram_usage / 16,1) #Scale VRAM to 0-1 assuming a maximum of 16GB is acceptable\n    scene_complexity_norm = min(scene_complexity / 10, 1) #Scale scene complexity to 0-1, assuming 10 is a high complexity\n    duration_norm = min(duration / 0.05,1) #Scale duration to 0-1, assuming 0.05 seconds as a comfortable frame duration\n    gpu_type_norm = gpu_type / 10 #Normalize GPU type; needs context dependent upper bound\n\n\n    #Mathematical optimization logic (weighted average with penalties)\n    #Weights are adjusted based on perceived importance for VR comfort. Adjust as needed.\n    comfort_score = 0.3 * (1 - gpu_util_norm) + 0.2 * (1 - vram_usage_norm) + 0.2 * (1 - cpu_util_norm) + 0.2 * (1 - scene_complexity_norm) + 0.1 * (1 - duration_norm)\n\n\n    # Penalty for high GPU utilization and high VRAM usage (combined)\n    resource_penalty = min(1, (gpu_util_norm + vram_usage_norm) * 0.5) #This increases the penalty if both GPU and VRAM are high\n    comfort_score -= resource_penalty * 0.1\n\n\n    #Consider GPU type - higher value means better GPU (this is arbitrary and needs modification based on actual GPU types and performance).\n    comfort_score += gpu_type_norm * 0.05\n\n    # Ensure score is within 0-1 range\n    comfort_score = max(0, min(1, comfort_score))\n\n    return comfort_score",
  "fitness_score": 0.9,
  "discovery_method": "funsearch",
  "generations_run": 50,
  "population_size": 30,
  "discovery_time": "2025-05-27T02:22:07.870116"
}