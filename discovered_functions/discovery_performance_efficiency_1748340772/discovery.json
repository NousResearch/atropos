{
  "discovery_id": "discovery_performance_efficiency_1748340772",
  "domain": "performance_efficiency",
  "timestamp": "2025-05-27T03:12:52.640364",
  "function_code": "import numpy as np\n\ndef vr_optimization_function(gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type):\n    \"\"\"\n    Optimizes VR performance focusing on GPU utilization.\n\n    Args:\n        gpu_util (float): GPU utilization percentage (0-100).\n        vram_usage (float): VRAM usage in GB.\n        cpu_util (float): CPU utilization percentage (0-100).\n        scene_complexity (float): Scene complexity score (higher is more complex).\n        duration (float): Frame rendering duration in seconds.\n        gpu_type (float): GPU type (higher is better, e.g., based on a ranking system).\n\n    Returns:\n        float: Optimized performance score between 0 and 1 (higher is better). \n               Returns -1 if input validation fails.\n\n    Raises:\n        TypeError: if any input is not a number.\n        ValueError: if any input is out of the expected range.\n\n    \"\"\"\n\n    # Input validation\n    if not all(isinstance(x, (int, float)) for x in [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]):\n        raise TypeError(\"All inputs must be numbers.\")\n    if not 0 <= gpu_util <= 100:\n        raise ValueError(\"GPU utilization must be between 0 and 100.\")\n    if not vram_usage >= 0:  #VRAM usage can be arbitrarily large.\n        raise ValueError(\"VRAM usage must be non-negative.\")\n    if not 0 <= cpu_util <= 100:\n        raise ValueError(\"CPU utilization must be between 0 and 100.\")\n    if not scene_complexity >= 0: # Scene complexity can be arbitrarily large\n        raise ValueError(\"Scene complexity must be non-negative.\")\n    if not duration > 0:\n        raise ValueError(\"Duration must be positive.\")\n    if not gpu_type >=0: #GPU type ranking can be arbitrarily large\n        raise ValueError(\"GPU type must be non-negative.\")\n\n\n    # Feature normalization (min-max scaling)\n    gpu_util_norm = gpu_util / 100.0\n    cpu_util_norm = cpu_util / 100.0\n\n    #Consider VRAM usage as a penalty. High VRAM usage negatively impacts performance, especially when focusing on GPU utilization.\n\n    vram_penalty = 1 / (1 + vram_usage) #inverse relationship - higher usage, lower penalty\n\n    # Optimize for GPU utilization, penalizing high CPU usage, high scene complexity, and long duration. \n    # GPU type acts as a positive factor.\n    optimization_score = (gpu_util_norm * 0.6)  + (vram_penalty * 0.2) - (cpu_util_norm * 0.1) - (scene_complexity * 0.05) - (duration * 0.05) + (gpu_type * 0.1)\n\n\n    #Ensure score is within 0 and 1 range\n    optimization_score = max(0, min(1, optimization_score))\n\n    return optimization_score",
  "fitness_score": 0.9,
  "discovery_method": "funsearch",
  "generations_run": 50,
  "population_size": 30,
  "discovery_time": "2025-05-27T03:12:52.638836"
}
