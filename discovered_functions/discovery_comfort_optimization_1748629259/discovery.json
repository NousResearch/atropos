{
  "discovery_id": "discovery_comfort_optimization_1748629259",
  "domain": "comfort_optimization",
  "timestamp": "2025-05-30T11:20:59.265239",
  "function_code": "import numpy as np\n\ndef vr_optimization_function(gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type):\n    \"\"\"\n    Predicts VR comfort score based on performance features.\n\n    Args:\n        gpu_util (float): GPU utilization (%).\n        vram_usage (float): VRAM usage (GB).\n        cpu_util (float): CPU utilization (%).\n        scene_complexity (float): Scene complexity score (higher is more complex).\n        duration (float): Frame duration (seconds).\n        gpu_type (float): GPU type (numerical encoding, higher is better).\n\n\n    Returns:\n        float: Optimized VR comfort score between 0 and 1 (inclusive). \n               Returns -1 if input validation fails.\n\n    Raises:\n        TypeError: if any input is not a number.\n        ValueError: if any input is out of range.\n\n    \"\"\"\n    # Input validation\n    if not all(isinstance(x, (int, float)) for x in [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]):\n        raise TypeError(\"All inputs must be numbers.\")\n\n    if not (0 <= gpu_util <= 100 and 0 <= cpu_util <= 100 and 0 <= scene_complexity <=10 and duration > 0 and gpu_type >0):  # Adjust ranges as needed\n        raise ValueError(\"Invalid input range. Check gpu_util, cpu_util, scene_complexity, duration and gpu_type.\")\n\n\n    # Feature normalization (min-max scaling)\n    gpu_util_norm = gpu_util / 100\n    cpu_util_norm = cpu_util / 100\n    vram_usage_norm = vram_usage / 8  # Assuming a reasonable max VRAM of 8GB. Adjust as needed.\n    scene_complexity_norm = scene_complexity / 10 # Assuming a reasonable max scene complexity of 10. Adjust as needed.\n    duration_norm = 1 / (1 + duration) #Inverse scaling to penalize higher frame durations\n\n\n    #Optimization Logic (weighted average with penalties)\n\n    # Weights are adjusted based on their importance in VR comfort. Adjust as needed based on your data and requirements.\n    comfort_score = 0.3 * (1 - gpu_util_norm) + 0.2 * (1 - cpu_util_norm) + 0.2 * (1 - vram_usage_norm) + 0.2 *(1-scene_complexity_norm) + 0.1 * duration_norm + 0.1* (gpu_type/5) #Assuming a max gpu_type of 5\n\n    #Ensure score is within 0-1 range\n    comfort_score = np.clip(comfort_score, 0, 1)\n\n    return comfort_score",
  "fitness_score": 0.9,
  "discovery_method": "funsearch",
  "generations_run": 50,
  "population_size": 30,
  "discovery_time": "2025-05-30T11:20:59.264599"
}