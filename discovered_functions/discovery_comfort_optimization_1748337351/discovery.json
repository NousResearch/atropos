{
  "discovery_id": "discovery_comfort_optimization_1748337351",
  "domain": "comfort_optimization",
  "timestamp": "2025-05-27T02:15:51.942607",
  "function_code": "import numpy as np\n\ndef vr_optimization_function(gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type):\n    \"\"\"\n    Optimizes VR performance for maximum comfort score.\n\n    Args:\n        gpu_util (float): GPU utilization percentage (0-100).\n        vram_usage (float): VRAM usage in GB.\n        cpu_util (float): CPU utilization percentage (0-100).\n        scene_complexity (float): Scene complexity score (higher is more complex).\n        duration (float): Duration of the VR experience in seconds.\n        gpu_type (float): GPU type (numerical representation, e.g., 2.0 for RTX 2080, etc.).\n\n    Returns:\n        float: Optimized VR comfort score between 0 and 1 (inclusive).  Returns -1 if input is invalid.\n\n    Raises:\n        TypeError: If any input is not a number.\n        ValueError: If any input is out of range.\n\n    \"\"\"\n\n    # Input validation\n    if not all(isinstance(x, (int, float)) for x in [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]):\n        raise TypeError(\"All inputs must be numbers.\")\n    if not 0 <= gpu_util <= 100:\n        raise ValueError(\"GPU utilization must be between 0 and 100.\")\n    if not vram_usage >= 0:  #VRAM usage can be arbitrarily high but not negative.\n        raise ValueError(\"VRAM usage must be non-negative.\")\n    if not 0 <= cpu_util <= 100:\n        raise ValueError(\"CPU utilization must be between 0 and 100.\")\n    if not scene_complexity >= 0: #Scene complexity can be arbitrarily high but not negative.\n        raise ValueError(\"Scene complexity must be non-negative.\")\n    if not duration > 0:\n        raise ValueError(\"Duration must be positive.\")\n    #GPU type validation is application specific and omitted for generality.\n\n\n\n    # Feature normalization (min-max scaling)\n    gpu_util_norm = gpu_util / 100  #Scale GPU utilization to 0-1\n    cpu_util_norm = cpu_util / 100 #Scale CPU utilization to 0-1\n\n    #considering a hypothetical maximum VRAM usage and Scene complexity for normalization.  Adjust as needed based on your data.\n    max_vram = 16 #Example\n    max_scene_complexity = 5 #Example\n\n    vram_usage_norm = vram_usage / max_vram\n    scene_complexity_norm = scene_complexity / max_scene_complexity\n\n\n    # Mathematical optimization logic (example using weighted average)\n    # Weights are adjusted based on the importance of each feature for VR comfort.  This needs careful tuning based on your data analysis and experiements.\n    weights = np.array([0.25, 0.2, 0.2, 0.15, 0.1, 0.1]) #weights for gpu_util_norm, vram_usage_norm, cpu_util_norm, scene_complexity_norm, duration, gpu_type respectively.\n\n\n    normalized_features = np.array([gpu_util_norm, vram_usage_norm, cpu_util_norm, scene_complexity_norm, 1/duration, 1/gpu_type]) #Duration and gpu_type are inversely proportional to comfort in this example. Adjust as needed.\n\n    comfort_score = np.dot(weights, normalized_features)\n\n\n    #clip to 0-1 range\n    comfort_score = np.clip(comfort_score, 0, 1)\n\n    return comfort_score",
  "fitness_score": 0.9,
  "discovery_method": "funsearch",
  "generations_run": 50,
  "population_size": 30,
  "discovery_time": "2025-05-27T02:15:51.942044"
}
