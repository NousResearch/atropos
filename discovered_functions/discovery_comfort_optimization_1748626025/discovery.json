{
  "discovery_id": "discovery_comfort_optimization_1748626025",
  "domain": "comfort_optimization",
  "timestamp": "2025-05-30T10:27:05.804579",
  "function_code": "import numpy as np\n\ndef vr_optimization_function(gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type):\n    \"\"\"\n    Optimizes VR performance for maximum comfort score.\n\n    Args:\n        gpu_util (float): GPU utilization percentage (0-100).\n        vram_usage (float): VRAM usage in GB.\n        cpu_util (float): CPU utilization percentage (0-100).\n        scene_complexity (float): Scene complexity score (higher is more complex).\n        duration (float): Frame duration in seconds.\n        gpu_type (float): GPU type (numerical encoding, e.g., 1,2,3...).\n\n\n    Returns:\n        float: Optimized VR comfort score (0-1, higher is better).  Returns -1 if input is invalid.\n\n    Raises:\n        TypeError: if any input is not a number.\n        ValueError: if any input is outside the expected range.\n\n    \"\"\"\n    # Input validation\n    if not all(isinstance(x, (int, float)) for x in [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]):\n        raise TypeError(\"All inputs must be numbers.\")\n\n    if not (0 <= gpu_util <= 100 and 0 <= cpu_util <= 100 and vram_usage >=0 and scene_complexity >=0 and duration > 0 and gpu_type >0):\n        raise ValueError(\"Inputs are outside the valid range.\")\n\n\n    # Feature normalization (min-max scaling)\n    gpu_util_norm = gpu_util / 100.0\n    cpu_util_norm = cpu_util / 100.0\n    #Assuming VRAM has a reasonable upper bound. Adjust 16 as needed based on your data.\n    vram_usage_norm = vram_usage / 16.0 #Normalize to a maximum of 16GB VRAM\n    duration_norm = 1.0/(1+duration) #Inverse duration, shorter is better\n\n    #Optimization logic (weighted average focusing on minimizing resource usage and maximizing frame rate)\n    #Weights are adjusted based on importance.  Experimentation is key here.\n    weights = np.array([0.2, 0.3, 0.2, 0.1, 0.2]) #weights for gpu,vram,cpu, scene complexity, duration\n    normalized_features = np.array([gpu_util_norm, vram_usage_norm, cpu_util_norm, scene_complexity/10.0, duration_norm]) #Normalize scene complexity as needed\n    comfort_score = 1 - np.sum(weights * normalized_features) # Higher score implies better performance\n\n    #GPU type impact (example: better GPU gives a boost)\n    gpu_type_boost = min(1, gpu_type/3) #Example boost for higher GPU types. Adjust as needed.\n    comfort_score = comfort_score * (1 + 0.1 * gpu_type_boost)  #Apply a small boost based on GPU type\n\n\n    # Ensure score is within 0-1 range\n    comfort_score = max(0, min(1, comfort_score))\n\n    return comfort_score",
  "fitness_score": 0.9,
  "discovery_method": "funsearch",
  "generations_run": 50,
  "population_size": 30,
  "discovery_time": "2025-05-30T10:27:05.803403"
}