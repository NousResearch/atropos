{
  "discovery_id": "discovery_performance_efficiency_1748626033",
  "domain": "performance_efficiency",
  "timestamp": "2025-05-30T10:27:13.307717",
  "function_code": "import numpy as np\n\ndef vr_optimization_function(gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type):\n    \"\"\"\n    Optimizes VR performance score focusing on GPU utilization.\n\n    Args:\n        gpu_util (float): GPU utilization percentage (0-100).\n        vram_usage (float): VRAM usage in GB.\n        cpu_util (float): CPU utilization percentage (0-100).\n        scene_complexity (float): Scene complexity score (higher is more complex).\n        duration (float): Frame duration in seconds.\n        gpu_type (float): GPU type (numerical representation, e.g., 1,2,3...).\n\n    Returns:\n        float: Optimized performance score between 0 and 1 (higher is better). \n               Returns None if input is invalid.\n\n    Raises:\n        TypeError: if any input is not a number.\n        ValueError: if any input is out of range.\n\n    \"\"\"\n    # Input validation\n    if not all(isinstance(x, (int, float)) for x in [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]):\n        raise TypeError(\"All inputs must be numbers.\")\n\n    if not (0 <= gpu_util <= 100 and 0 <= cpu_util <= 100 and 0 <= scene_complexity and 0 <= duration and gpu_type >0):\n        raise ValueError(\"Invalid input range. Check gpu_util, cpu_util, scene_complexity, duration, and gpu_type values.\")\n\n    # Feature normalization (min-max scaling)\n    gpu_util_norm = gpu_util / 100.0  \n    cpu_util_norm = cpu_util / 100.0\n    vram_usage_norm = vram_usage / 16 #assuming a max VRAM of 16GB as a reasonable upper bound. Adjust as needed.\n\n\n    # Optimization logic focusing on GPU utilization.  Penalize high VRAM and CPU usage.\n    # We weight GPU utilization more heavily.\n\n    gpu_weight = 0.6  \n    vram_weight = 0.2\n    cpu_weight = 0.2\n\n    #Inverse duration to reward shorter frame times.  Handle potential division by zero.\n    inv_duration = 1.0 / (duration + 1e-9) if duration > 0 else 0 # add a small value to avoid division by zero\n\n    performance_score = (gpu_weight * gpu_util_norm) + (inv_duration * gpu_weight * 0.5) - (vram_weight * vram_usage_norm) - (cpu_weight * cpu_util_norm)\n\n\n    #Clip the score between 0 and 1\n    performance_score = np.clip(performance_score, 0, 1)\n\n    return performance_score",
  "fitness_score": 0.9,
  "discovery_method": "funsearch",
  "generations_run": 50,
  "population_size": 30,
  "discovery_time": "2025-05-30T10:27:13.306848"
}