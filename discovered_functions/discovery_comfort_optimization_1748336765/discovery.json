{
  "discovery_id": "discovery_comfort_optimization_1748336765",
  "domain": "comfort_optimization",
  "timestamp": "2025-05-27T02:06:05.466814",
  "function_code": "import numpy as np\n\ndef vr_optimization_function(gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type):\n    \"\"\"\n    Optimizes VR performance for maximum comfort score.\n\n    Args:\n        gpu_util (float): GPU utilization (0-100).\n        vram_usage (float): VRAM usage in GB.\n        cpu_util (float): CPU utilization (0-100).\n        scene_complexity (float): Scene complexity score (higher is more complex).\n        duration (float): Duration of VR experience in minutes.\n        gpu_type (float): GPU type (e.g., 2.0 for RTX 2080, 3.5 for RTX 3090, higher is better).\n\n\n    Returns:\n        float: Optimized VR comfort score between 0 and 1 (inclusive). Returns -1 if input is invalid.\n\n    Raises:\n        TypeError: if any input is not a number.\n        ValueError: if any input is out of range.\n\n    \"\"\"\n\n    # Input validation\n    if not all(isinstance(x, (int, float)) for x in [gpu_util, vram_usage, cpu_util, scene_complexity, duration, gpu_type]):\n        raise TypeError(\"All inputs must be numbers.\")\n\n    if not (0 <= gpu_util <= 100 and 0 <= cpu_util <= 100 and vram_usage >= 0 and scene_complexity >= 0 and duration >= 0 and gpu_type > 0):\n        raise ValueError(\"Inputs are out of range. Check gpu_util, cpu_util, vram_usage, scene_complexity, duration, and gpu_type.\")\n\n\n    # Feature normalization (min-max scaling)\n    gpu_util_norm = gpu_util / 100.0\n    cpu_util_norm = cpu_util / 100.0\n    # Assuming a reasonable maximum VRAM usage of 24GB. Adjust as needed based on your system\n    vram_usage_norm = min(vram_usage / 24.0,1.0) #Cap at 1.0 to avoid disproportionate effect\n\n    #Considering scene complexity inversely proportional to comfort.  Higher complexity = lower comfort\n    scene_complexity_norm = 1.0 / (1.0 + scene_complexity)  \n\n\n    # Duration needs careful consideration.  Longer duration can reduce comfort due to fatigue\n    duration_norm = 1.0 / (1.0 + duration)\n\n\n    #Weighted average based on importance. Adjust weights based on your requirements.\n    gpu_weight = 0.3  #Higher weight for GPU due to rendering\n    cpu_weight = 0.2\n    vram_weight = 0.15\n    scene_weight = 0.2\n    duration_weight = 0.1\n    gpu_type_weight = 0.05\n\n\n    comfort_score = (gpu_weight * (1 - gpu_util_norm) + cpu_weight * (1 - cpu_util_norm) + vram_weight * (1-vram_usage_norm) +\n                    scene_weight * scene_complexity_norm + duration_weight * duration_norm + gpu_type_weight * (gpu_type/5.0) ) #Normalize gpu_type\n\n\n    #Ensure score is within [0,1]\n    comfort_score = np.clip(comfort_score, 0, 1)\n\n    return comfort_score",
  "fitness_score": 0.9,
  "discovery_method": "funsearch",
  "generations_run": 50,
  "population_size": 30,
  "discovery_time": "2025-05-27T02:06:05.465292"
}
